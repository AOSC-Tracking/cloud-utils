Patch created with './debian/update-sync-to-main ../trunk'
------------------------------------------------------------
revno: 340
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Fri 2018-12-07 10:51:41 -0500
message:
  update changelog files to revno 339
------------------------------------------------------------
revno: 339 [merge]
fixes bug: https://launchpad.net/bugs/1807171
author: Lars Kellogg-Stedman <lars@redhat.com>
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Fri 2018-12-07 10:42:24 -0500
message:
  growpart: fix bug occurring if start sector and size were the same.
  
  The existing sed expression would erroneously change the start sector
  of a partition, rather than the size, if the start sector and size
  were identical. This commit modifies the sed expression so that it
  will only operate on the final match in the line.
------------------------------------------------------------
revno: 338 [merge]
fixes bug: https://launchpad.net/bugs/1744406
author: Kevin Locke <kevin@kevinlocke.name>
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Fri 2018-10-19 12:46:40 -0400
message:
  growpart: Resolve symbolic links before operating.
  
  Disks can be referred to via symlink aliases, such as the ones in
  /dev/disk/by-id and /dev/disk/by-path.  These alias paths can have
  different partition naming behavior than the un-aliased path.  For
  example, both of the above aliases add -partX to the name for partition
  X, rather than just X.  Previously this would cause growpart to fail
  with the error:
    
    failed to get start and end for ${dpart} in ${DISK}
    
  Because the awk expression would not match the partition path.  This
  commit fixes the error by resolving symlink device paths before use.
------------------------------------------------------------
revno: 337
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Thu 2018-10-18 10:50:29 -0400
message:
  mount-image-callback: fix mostly harmless typo in variable name.
  
  This typo actually had no real negative side effect because at the
  point of use, UMOUNTS had no entries.  So:
    UMOUNTS[${BOGUS[@]}]=x
  is the same as the corrected version
    UMOUNTS[${#UMOUNTS[@]}]=x
  
  if UMOUNTS was an empty array at the time (which it was).
------------------------------------------------------------
revno: 336
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Thu 2018-10-18 10:48:50 -0400
message:
  mount-image-callback: fix typo meaning we never timed out waiting for a disk.
  
  simple typo 'i=$(($i+1)):' instead of i=$(($i+1))
  meant that we'd never actually take the fail path.
------------------------------------------------------------
revno: 335
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Thu 2018-09-06 13:25:10 -0400
message:
  debian/tests/control: Set dependencies correctly.
------------------------------------------------------------
revno: 334
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Wed 2018-09-05 23:13:53 -0400
message:
  Sync debian/tests directory with what is in cosmic.
------------------------------------------------------------
revno: 333
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Wed 2018-09-05 22:37:40 -0400
message:
  update debian/changelog for all of 0.31
------------------------------------------------------------
revno: 332
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Wed 2018-09-05 22:35:46 -0400
message:
  update ChangeLog
------------------------------------------------------------
revno: 331
fixes bug: https://launchpad.net/bugs/1706751
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Wed 2018-09-05 22:32:39 -0400
message:
  growpart: fix bug when resizing a middle partition with sgdisk.
  
  Added a test and made growpart output consistent between sgdisk
  and sfdisk resizers.
  Thanks to Fred De Backer.
------------------------------------------------------------
revno: 330
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Wed 2018-09-05 22:29:17 -0400
message:
  test/test-mic: fix typo
------------------------------------------------------------
revno: 329 [merge]
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Wed 2018-09-05 22:28:36 -0400
message:
  run test for mount-image-callback
------------------------------------------------------------
revno: 328
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Wed 2018-09-05 22:27:48 -0400
message:
  debian/tests/control: mention dependencies on gdisk and fdisk.
------------------------------------------------------------
revno: 327
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Wed 2018-09-05 12:09:16 -0400
message:
  update ChangeLog
------------------------------------------------------------
revno: 326
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Wed 2018-09-05 12:08:49 -0400
message:
  mount-image-callback: mention --help and -C/--cd-mountpoint in Usage
------------------------------------------------------------
revno: 325
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Wed 2018-09-05 12:07:55 -0400
message:
  update ChangeLog
------------------------------------------------------------
revno: 324
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Fri 2018-04-13 09:02:00 -0400
message:
  growpart: Fix check for MBR to use the correct name (dos).
  
  The previous commit was only tested with gpt formatted disk,
  and thus mbr formatted disks would not emit the warning or
  have the max size applied.
------------------------------------------------------------
revno: 323 [merge]
fixes bug: https://launchpad.net/bugs/1762748
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Thu 2018-04-12 23:27:05 -0400
message:
  growpart: fix bug that stopped GPT disks from being grown past 2TB.
  
  MBR max size was being applied to GPT partitioned disks.
  The change here is to only apply the mbr max (and only WARN about the limit)
  if the format is MBR.
  
  Also, adjust test/test-growpart to support reading disk orig size
  and new size from environment to make testing more easy.
  
    sudo PATH=./bin:$PATH PT_TYPE=gpt \
       DISK_SIZE_NEW=5T DISK_SIZE_ORIG=1T ./test/test-growpart
------------------------------------------------------------
revno: 322
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Thu 2018-01-04 14:02:54 -0500
message:
  update changelog
------------------------------------------------------------
revno: 321 [merge]
fixes bug: https://launchpad.net/bugs/1715994
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Thu 2018-01-04 14:02:26 -0500
message:
  mount-image-callback: Drop support for mounting lxd containers.
  
  The 'lxd:' support in mount-image-callback only worked in some cases,
  and then stopped working in all cases with lxc 2.17.
  
  This drops the lxd support, but leaves in the 'mchroot' support which
  came with it.
------------------------------------------------------------
revno: 320
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Thu 2018-01-04 14:01:39 -0500
message:
  update changelog
------------------------------------------------------------
revno: 319
fixes bugs: https://launchpad.net/bugs/1741300 https://launchpad.net/bugs/1741096
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Thu 2018-01-04 13:56:52 -0500
message:
  mount-image-callback: run blockdev and udevadm settle on nbd devices.
  
  When we connect nbd devices, ensure that the kernel re-reads the partition
  table information.  This ensures that the partition devices (nbd0p1, nbd0p2)
  are correct when used later.
  
  Also required then is a udevadm settle.
  
  On xenial, the blockdev is needed, on newer releases some udev magic or
  systemd handles it.
------------------------------------------------------------
revno: 318
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Wed 2018-01-03 11:34:51 -0500
message:
  test/test-mic: better debug info
------------------------------------------------------------
revno: 317
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Wed 2018-01-03 10:44:47 -0500
message:
  mount-image-callback: more helpful debug messages.
------------------------------------------------------------
revno: 316
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Fri 2017-02-10 15:31:23 -0500
message:
  update changelog
------------------------------------------------------------
revno: 315
fixes bug: https://launchpad.net/bugs/1663722
committer: Scott Moser <smoser@ubuntu.com>
branch nick: trunk
timestamp: Fri 2017-02-10 15:30:56 -0500
message:
  mount-image-callback: fix nbd mounting with rw.
  
  mount was getting called with -o '' due to bad variable name
------------------------------------------------------------
Use --include-merged or -n0 to see merged revisions.
=== modified file 'ChangeLog'
--- old/ChangeLog	2016-10-24 15:31:49 +0000
+++ new/ChangeLog	2018-12-07 15:51:41 +0000
@@ -1,3 +1,19 @@
+0.31
+ - mount-image-callback: mount with -o 'rw' or -o 'ro' (LP: #1663722)
+ - mount-image-callback: run blockdev and udevadm settle on nbd devices.
+   (LP: #1741096, 1741300)
+ - mount-image-callback: Drop support for mounting lxd containers.
+   (LP: #1715994)
+ - growpart: fix bug that stopped GPT disks from being grown past 2TB.
+   (LP: #1762748)
+ - mount-image-callback: mention --help and -C/--cd-mountpoint in Usage
+ - growpart: fix bug when resizing a middle partition with sgdisk
+   (LP: #1706751) [Fred De Backer]
+ - growpart: Resolve symbolic links before operating.
+   [Kevin Locke] (LP: #1744406)
+ - growpart: fix bug occurring if start sector and size were the same.
+   [Lars Kellogg-Stedman] (LP: #1807171)
+
 0.30
  - ubuntu-cloudimg-query: fix xenial default to be ebs-ssd
     as traditional ebs are no longer available. (LP: #1593451)

=== modified file 'bin/growpart'
--- old/bin/growpart	2016-09-01 17:46:40 +0000
+++ new/bin/growpart	2018-12-06 20:32:35 +0000
@@ -244,8 +244,6 @@
 	fi
 
 	debug 1 "$sector_num sectors of $sector_size. total size=${disk_size} bytes"
-	[ $(($disk_size/512)) -gt $mbr_max_512 ] &&
-		debug 1 "WARN: disk is larger than 2TB. additional space will go unused."
 
 	rqe sfd_dump sfdisk --unit=S --dump "${DISK}" >"${dump_out}" ||
 		fail "failed to dump sfdisk info for ${DISK}"
@@ -289,17 +287,21 @@
 		[ -n "${max_end}" ] ||
 		fail "failed to get max_end for partition ${PART}"
 
-	mbr_max_sectors=$((mbr_max_512*$((sector_size/512))))
-	if [ "$max_end" -gt "$mbr_max_sectors" ]; then
-		max_end=$mbr_max_sectors
-	fi
-
 	if [ "$format" = "gpt" ]; then
 		# sfdisk respects 'last-lba' in input, and complains about
 		# partitions that go past that.  without it, it does the right thing.
 		sed -i '/^last-lba:/d' "$dump_out" ||
 			fail "failed to remove last-lba from output"
 	fi
+	if [ "$format" = "dos" ]; then
+		mbr_max_sectors=$((mbr_max_512*$((sector_size/512))))
+		if [ "$max_end" -gt "$mbr_max_sectors" ]; then
+			max_end=$mbr_max_sectors
+		fi
+		[ $(($disk_size/512)) -gt $mbr_max_512 ] &&
+			debug 0 "WARNING: MBR/dos partitioned disk is larger than 2TB." \
+				"Additional space will go unused."
+	fi
 
 	local gpt_second_size="33"
 	if [ "${max_end}" -gt "$((${sector_num}-${gpt_second_size}))" ]; then
@@ -321,11 +323,13 @@
 	# now, change the size for this partition in ${dump_out} to be the
 	# new size
 	new_size=$((${max_end}-${pt_start}))
-	sed "\|^\s*${dpart} |s/${pt_size},/${new_size},/" "${dump_out}" \
+	sed "\|^\s*${dpart} |s/\(.*\)${pt_size},/\1${new_size},/" "${dump_out}" \
 		>"${new_out}" ||
 		fail "failed to change size in output"
 
-	change_info="partition=${PART} start=${pt_start} old: size=${pt_size} end=${pt_end} new: size=${new_size},end=${max_end}"
+	change_info="partition=${PART} start=${pt_start}"
+	change_info="${change_info} old: size=${pt_size} end=${pt_end}"
+	change_info="${change_info} new: size=${new_size} end=${max_end}"
 	if [ ${DRY_RUN} -ne 0 ]; then
 		echo "CHANGE: ${change_info}"
 		{
@@ -434,6 +438,8 @@
 	pt_end=$(awk '$1 == '"${PART}"' { print $3 }' "${pt_data}") &&
 		[ -n "${pt_end}" ] ||
 		fail "${dev}: failed to get end sector"
+	# sgdisk start and end are inclusive.  start 2048 length 10 ends at 2057.
+	pt_end=$((pt_end+1))
 	pt_size="$((${pt_end} - ${pt_start}))"
 
 	# Get the last usable sector
@@ -473,9 +479,9 @@
 
 	# Calculate the new size of the partition
 	new_size=$((${pt_max} - ${pt_start}))
-	old="old: size=${pt_size},end=${pt_end}"
-	new="new: size=${new_size},end=${pt_max}"
-	change_info="${dev}: start=${pt_start} ${old} ${new}"
+	change_info="partition=${PART} start=${pt_start}"
+	change_info="${change_info} old: size=${pt_size} end=${pt_end}"
+	change_info="${change_info} new: size=${new_size} end=${pt_max}"
 	
 	# Backup the current partition table, we're about to modify it
 	rq sgd_backup $wouldrun sgdisk "--backup=${GPT_BACKUP}" "${DISK}" ||
@@ -490,7 +496,7 @@
 	#  - set the partition GUID
 	#  - set the partition name
 	rq sgdisk_mod $wouldrun sgdisk --move-second-header "--delete=${PART}" \
-		"--new=${PART}:${pt_start}:${pt_max}" \
+		"--new=${PART}:${pt_start}:$((pt_max-1))" \
 		"--typecode=${PART}:${code}" \
 		"--partition-guid=${PART}:${guid}" \
 		"--change-name=${PART}:${name}" "${DISK}" &&
@@ -767,6 +773,17 @@
 
 [ -e "${DISK}" ] || fail "${DISK}: does not exist"
 
+# If $DISK is a symlink, resolve it.
+# This avoids problems due to varying partition device name formats
+# (e.g. "1" for /dev/sda vs "-part1" for /dev/disk/by-id/name)
+if [ -L "${DISK}" ]; then
+	has_cmd readlink ||
+		fail "${DISK} is a symlink, but 'readlink' command not available."
+	real_disk=$(readlink -f "${DISK}") || fail "unable to resolve ${DISK}"
+	debug 1 "${DISK} resolved to ${real_disk}"
+	DISK=${real_disk}
+fi
+
 [ "${PART#*[!0-9]}" = "${PART}" ] || fail "partition-number must be a number"
 
 verify_ptupdate "$pt_update" || fail

=== modified file 'bin/mount-image-callback'
--- old/bin/mount-image-callback	2016-10-24 15:42:55 +0000
+++ new/bin/mount-image-callback	2018-10-18 14:50:29 +0000
@@ -17,7 +17,6 @@
    invoke the provided cmd with args
 
    supported 'file' are:
-      lxd:name  : the rootfs for lxd container 'name'
       file      : any disk format supported by qemu-nbd
 
    the temporary mountpoint will be put in an a environment variable
@@ -33,7 +32,10 @@
 
    options:
     -v | --verbose             increase verbosity
+    -h | --help                print this message.
+
          --read-only           use read-only mount.
+    -C | --cd-mountpoint       change dir to mountpoint before executing cmd.
     -m | --mountpoint MP       mount to directory MP rather than a temp dir
          --overlay             mount via overlayfs
     -P | --partition PARTNUM   mount partition PARTNUM (default 'auto')
@@ -42,6 +44,7 @@
     -p | --proc                bind mount /proc
     -s | --sys                 bind mount /sys
     -d | --dev                 bind mount /dev
+
          --system-mounts       bind mount /sys, /proc, /dev
          --system-resolvconf   copy host's resolvconf into /etc/resolvconf
          --format FMT          specify the format of the image.
@@ -159,37 +162,13 @@
 	local d="$1"
 	local umap="$1" gmap="$2"
 	[ -d "$1" ] || mkdir -p "$1"
-	add_bin "$d/uns-switch" <<"EOF" || return 1
-#!/bin/sh
-[ $# -eq 0 ] && set -- ${SHELL:-/bin/bash}
-if [ -z "$MIC_SUBUID" -a -z "$MIC_SUBGID" ]; then
-	exec "$@"
-fi
-exec lxc-usernsexec ${MIC_SUBUID:+-m u:0:${MIC_SUBUID}} \
-	${MIC_SUBGID:+-m g:0:${MIC_SUBGID}} -- "$@"
-EOF
 	add_bin "$d/mchroot" <<"EOF" || return 1
 #!/bin/sh
-exec uns-switch chroot "$MOUNTPOINT" "$@"
+exec chroot "$MOUNTPOINT" "$@"
 EOF
 	return
 }
 
-get_subid() {
-	local id="$1" file="$2"
-	awk -F: '$1 == id { printf("%s:%s\n", $2, $3); exit(0); }' \
-		id="$id" "$file"
-}
-
-set_subids() {
-	local id="$1" out="" muid="" mgid=""
-	[ -z "$id" ] && return 0
-	muid=$(get_subid "$id" /etc/subuid) &&
-		mgid=$(get_subid "$id" /etc/subgid) &&
-		[ -n "$muid" -a -n "$mgid" ] &&
-		export MIC_SUBGID="$muid" MIC_SUBUID="$mgid" && return
-}
-
 mount_overlay() {
 	local lower="$1" upper="$2" workdir="$3"
 	local olayopts="lowerdir=$lower,upperdir=$upper"
@@ -276,15 +255,23 @@
 			debug 2 "."
 		done
 	fi
-	read pid < "$pidfile" && debug 2 "pid for $nbd is $pidfile" || {
+	read pid < "$pidfile" && debug 2 "pid for $nbd is $pid" || {
 		error "reading pid from $pidfile for $nbd failed!";
 		disconnect_qemu
 		return 1
 	}
 
 	debug 1 "connected $img_in ($fmt) ${rwmode} to $nbd. waiting for device."
+
+	local out=""
+	# This can fail due to udev events, but we ignore that.  We need to ensure
+	# it happens for where it doesnt happen automatically (LP: #1741300)
+	out=$(blockdev --rereadpt "$nbd" 2>&1) ||
+		debug 1 "blockdev rereadpt $nbd failed"
+	udevadm settle
+
 	i=0
-	while i=$(($i+1)):; do
+	while i=$(($i+1)); do
 		get_partition "$nbd" && nptnum="$_RET" && break
 		[ $i -eq 40 ] && {
 			error "gave up on $nbd"
@@ -345,8 +332,8 @@
 	assert_nbd_support || return
 	connect_nbd "$img" "$fmt" "$ptnum" "$rwmode" || return
 	local ptnum="$_RET_PT" mdev="$_RET_DEV" nbd="$_RET_NBD"
-	if ( set -f; mount -o "$romode" $opts "$mdev" "$img_mp" ); then
-		debug 1 "mounted $mdev via qemu-nbd $nbd"
+	if ( set -f; mount -o "$rwmode" $opts "$mdev" "$img_mp" ); then
+		debug 1 "mounted $mdev via qemu-nbd $nbd at $img_mp"
 	else
 		error "failed to mount $mdev"
 		return 1
@@ -396,38 +383,18 @@
 		return 1;
 	}
 
-	local uns_switch=false
 	img_in="$1"
 	shift 1
 
-	case "$img_in" in
-		lxd:*)
-			if [ "$ptnum" != "auto" ]; then
-				error "--ptnum incompatible with directory"
-				return 1;
-			fi
-			command -v lxc-usernsexec >/dev/null 2>&1 || {
-				error "lxd support needs lxc-usernsexec"; 
-				return 1;
-			}
-			img="/var/lib/lxd/containers/${img_in#lxd:}/rootfs"
-			[ -d "$img" ] || {
-				error "${img_in}: no rootfs in $img. Not a container?"
-				return 1;
-			}
-			set_subids lxd || {
-				error "failed reading subids for lxd";
-				return 1;
-			}
-			uns_switch=true
-			;;
-		*)
-			img=$(readlink -f "$img_in") ||
-				{ error "failed to get full path to $img_in"; return 1; }
-			[ -f "$img" ] ||
-				{ error "$img: not a file"; return 1; }
-			;;
-	esac
+	if [ "${img_in#lxd:}" != "${img_in}" -a ! -f "${img_in}" ]; then
+		error "${img_in}: lxd is no longer supported."
+		return 1;
+	fi
+
+	img=$(readlink -f "$img_in") ||
+		{ error "failed to get full path to $img_in"; return 1; }
+	[ -f "$img" ] ||
+		{ error "$img: not a file"; return 1; }
 
 	[ "$(id -u)" = "0" ] ||
 		{ error "sorry, must be root"; return 1; }
@@ -454,19 +421,10 @@
 	fi
 
 	out=""
-	if [ -d "$img" ]; then
-		debug 1 "using directory at $img for $img_in"
-		mp=$img
-		if $overlay; then
-			debug 1 "mounting $img to $mp"
-			mount --bind "$img" "$img_mp" ||
-				{ error "failed to mount --bind '$img' '$mp'"; return 1; }
-			UMOUNTS[${#UMOUNTS[@]}]="$mp"
-		fi
-	elif [ "$ptnum" = "auto" -o "$ptnum" = "0" ] &&
+	if [ "$ptnum" = "auto" -o "$ptnum" = "0" ] &&
 		out=$(set -f; mount -o "loop,$rwmode" $opts "$img" "$img_mp" 2>&1); then
-		debug 1 "mounted simple filesystem image $rwmode in '$img_in'"
-		UMOUNTS[${UMOUNT[@]}]="$img_mp"
+		debug 1 "mounted simple fs image $rwmode in '$img_in' at $img_mp"
+		UMOUNTS[${#UMOUNTS[@]}]="$img_mp"
 	else
 		local hasqemu=false
 		command -v "qemu-nbd" >/dev/null 2>&1 && hasqemu=true
@@ -479,7 +437,7 @@
 			fi
 			return 1
 		fi
-		mount_nbd "$img" "$img_mp" "$fmt" "$ptnum" "$opts" || return
+		mount_nbd "$img" "$img_mp" "$fmt" "$ptnum" "$rwmode" "$opts" || return
 		UMOUNTS[${#UMOUNTS[@]}]="$img_mp"
 	fi
 
@@ -530,13 +488,6 @@
 		error "MOUNTPOINT=$mp"
 	fi
 
-	if $uns_switch && [ "$1" = "chroot" ]; then
-		debug 1 "added helper uns-switch for chroot"
-		cmd=( uns-switch "${cmd[@]}" )
-	elif $uns_switch; then
-		debug 1 "uns-switch helper can be used for changing user map"
-	fi
-
 	add_helpers "$TEMP_D/bin" "$SUBUID" "$SUBGID" || {
 		error "failed to add helpers to $TEMP_D";
 		return 1;

=== modified file 'debian/changelog'

=== modified file 'debian/tests/control'

=== modified file 'debian/tests/functions'

=== added file 'debian/tests/growpart-fsimage-middle'

=== added file 'debian/tests/growpart-start-matches-size'

=== added file 'debian/tests/mic'

=== modified file 'test/test-growpart'
--- old/test/test-growpart	2016-09-01 19:29:00 +0000
+++ new/test/test-growpart	2018-04-13 03:23:08 +0000
@@ -5,7 +5,10 @@
 [ "$(id -u)" = "0" ] ||
 	{ echo "sorry, must be root"; exit 1; }
 
-PT_TYPE="${PT_TYPE:-dos}" # dos or gpt or sfdisk-gpt
+PT_TYPE="${PT_TYPE:-dos}" # dos or gpt
+size=${DISK_SIZE_NEW:-1000M}
+osize=${DISK_SIZE_ORIG:-500M}
+
 MP=""
 LODEV=""
 TEMP_D=""
@@ -43,15 +46,15 @@
 img="${TEMP_D}/disk.img"
 mp="${TEMP_D}/mp"
 
-size=1000M
-osize=500M
+echo "Partitioning $PT_TYPE orig_size=$osize grow_size=$size."
+echo "growpart is $(which growpart)"
 rm -f $img
 [ ! -e $mp ] || rmdir $mp || { echo "failed rmdir $mp"; exit 1; }
 mkdir $mp
 
 truncate --size $osize "$img"
 
-label_flag="--label=${PT_TYPE:-dos}"
+label_flag="--label=${PT_TYPE}"
 echo "2048," | rq sfdisk $label_flag --force --unit=S "$img"
 
 truncate --size "$size" "$img"

=== added file 'test/test-growpart-fsimage-middle'
--- old/test/test-growpart-fsimage-middle	1970-01-01 00:00:00 +0000
+++ new/test/test-growpart-fsimage-middle	2018-09-06 02:32:39 +0000
@@ -0,0 +1,74 @@
+#!/bin/bash
+#
+# Create a disk image where a partition other than the last is grown.
+# brought up under bug 1706751, where we had an off-by-one error
+# when resizing with sgdisk.
+
+set -e
+
+TEMP_D=""
+
+rq() {
+	local out="${TEMP_D}/out"
+	"$@" > "$out" 2>&1 || { echo "FAILED:" "$@"; cat "$out"; return 1; }
+}
+fail() { echo "FAILED:" "$@" 1>&2; exit 1; }
+
+setup_img() {
+	local img_fp="$1" img=""
+	img=$(basename "$img_fp")
+	sfdisk "${img_fp}" <<EOF
+label: gpt
+label-id: 67CCB7DB-DEE7-4A7F-8F67-4DAC2B2F09A9
+device: ${img}
+unit: sectors
+first-lba: 34
+last-lba: 4194270
+
+${img}1 : start=        2048, size=      204800, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4, uuid=5ADB0402-936C-4AF3-8E56-74C161BCF925, name="misc fs"
+${img}2 : start=      206848, size=      524288, type=0657FD6D-A4AB-43C4-84E5-0933C84B4F4F, uuid=72174002-4428-427C-9DED-92479F1CDB4A, name="my swap"
+${img}3 : start=      731136, size=      819200, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4, uuid=EE4FB792-DA02-4E1E-90DA-961D3A603225, name="root filesystem"
+${img}4 : start=          34, size=        2014, type=21686148-6449-6E6F-744E-656564454649, uuid=AC2AF951-6AD2-4B14-818F-BF457A4386AD, name="BIOS boot partition"
+${img}5 : start=     4061184, size=      133087, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4, uuid=FC3742E9-53E2-410C-8036-8B64DD9F2ED6, name="config drive"
+EOF
+}
+
+cleanup() {
+	[ ! -d "${TEMP_D}" ] || rm -Rf "${TEMP_D}"
+}
+TEMP_D=$(mktemp -d ${TMPDIR:-/tmp}/${0##*/}.XXXXXX)
+trap cleanup EXIT
+
+expected="CHANGED: partition=3 start=731136 old: size=819200 end=1550336"
+expected="${expected} new: size=3330048 end=4061184"
+CR='
+'
+for resizer in sfdisk sgdisk; do
+	img="${TEMP_D}/disk-$resizer.img"
+	echo "====== Testing with resizer=$resizer ====="
+	rq truncate "--size=2G" "$img"
+	( cd ${TEMP_D} && rq setup_img "${img##*/}" ) || fail "setup image $img"
+	echo "==== before ===="
+	( cd "${TEMP_D}" && sfdisk --dump "${img##*/}" )
+	err="${TEMP_D}/gp.err"
+	out="${TEMP_D}/gp.out"
+	if ! GROWPART_RESIZER=$resizer \
+			growpart -v -v "$img" 3 2>"$err" > "$out"; then
+		cat "$err" "$out"
+		fail "[resizer=$resizer] growpart failed"
+	fi
+	echo "==== after ===="
+	( cd "${TEMP_D}" && sfdisk --dump "${img##*/}" )
+	echo
+    echo "==== after sgdisk ==="
+	( cd "${TEMP_D}" && sgdisk --print "${img##*/}" )
+	echo "==== growpart-stderr ==="
+	cat "$err"
+	echo "==== growpart-stdout ===="
+	cat "$out"
+	[ "$(cat $out)" = "$expected" ] || {
+        fail "[resizer=$resizer] output ^^^ did not match expected vvv:${CR}$expected"
+	}
+done
+
+# vi: ts=4 noexpandtab

=== added file 'test/test-growpart-start-matches-size'
--- old/test/test-growpart-start-matches-size	1970-01-01 00:00:00 +0000
+++ new/test/test-growpart-start-matches-size	2018-12-07 15:41:24 +0000
@@ -0,0 +1,95 @@
+#!/bin/bash
+#
+# Create a disk image where there exists a partition whose sizes matches the
+# start sector.
+# brought up under bug 1807171, which describes an error in the sed expression
+# used to generate the replacement partition map
+
+set -e
+
+TEMP_D=""
+
+rq() {
+    local out="${TEMP_D}/out"
+    "$@" > "$out" 2>&1 || { echo "FAILED:" "$@"; cat "$out"; return 1; }
+}
+fail() { echo "FAILED:" "$@" 1>&2; exit 1; }
+
+read_pt_info() {
+    # read_pt_info(dump, <file><ptnum>, keyname)
+    # parse sfdisk --dump output returning the value for keyname.
+    # expecting to parse a single line like:
+    #  disk.img2 : start=     1026048, size=     1026048,
+    #     type=4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709,
+    #     uuid=a0e1636e-b759-4e7a-bd14-6f3d6c04745d
+    local file="$1" fpart="$2" key="$3"
+    local cmd="" out=""
+    cmd=( 
+        sed 
+        # delete any other line.
+        -e "/^$fpart[ ]*:/!d"
+        # match key=<spaces><value>,
+        -e "s/.* $key[ ]*=[ ]*\([^, ]*\).*/\1/"
+    )
+    out=$("${cmd[@]}" "$file") ||
+        { fail "failed command: ${cmd[*]}"; return 1; }
+    _RET="$out"
+}
+
+setup_image() {
+    sfdisk disk.img <<EOF
+label: gpt
+label-id: db24000c-6ef3-4a17-b71c-1064baa29514
+device: disk.img
+unit: sectors
+first-lba: 2048
+last-lba: 4194270
+
+disk.img1 : start=        2048, size=     1024000, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B, uuid=5bc16165-bfc0-4e13-94eb-b898dc0bca41
+disk.img2 : start=     1026048, size=     1026048, type=4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709, uuid=a0e1636e-b759-4e7a-bd14-6f3d6c04745d
+EOF
+}
+
+cleanup() {
+    rm -rf "${TEMP_D}"
+}
+
+test_resize () {
+    local resizer="$1" expected_start="$2" expected_size="$3"
+    echo "====== Testing with resizer=$resizer ====="
+
+    (
+        cd ${TEMP_D}
+        echo "$expected" > partitions.expected
+
+        rq truncate "--size=2G" disk.img
+        rq setup_image || fail "setup image $img"
+
+        sfdisk --dump disk.img > partitions.before
+
+        if ! GROWPART_RESIZER=$resizer \
+                growpart -v -v disk.img 2 2>"stderr" > "stdout"; then
+            cat "stderr" "stdout"
+            fail "[resizer=$resizer] growpart failed"
+        fi
+        
+        sfdisk --dump disk.img > partitions.after
+        read_pt_info partitions.after disk.img2 start
+        start=$_RET
+        read_pt_info partitions.after disk.img2 size
+        size=$_RET
+        [ "$expected_start" = "$start" ] &&
+            [ "$expected_size" = "$size" ] || {
+            fail "$resizer failed. expected start/size != found start/size" \
+                "($expected_start/$expected_size != $start/$size)"
+        }
+    )
+}
+
+TEMP_D=$(mktemp -d ${TMPDIR:-/tmp}/${0##*/}.XXXXXX)
+trap cleanup EXIT
+
+# the sfdisk and sgdisk resizers result in slightly different output,
+# because of course they do.
+test_resize sfdisk 1026048 3168223
+test_resize sgdisk 1026048 3166208

=== modified file 'test/test-mic'
--- old/test/test-mic	2016-10-05 14:35:51 +0000
+++ new/test/test-mic	2018-09-06 02:29:17 +0000
@@ -12,7 +12,7 @@
 }
 rq() {
    local out="${TEMP_D}/out"
-	"$@" > "$out" 2>&1 || { error "FAILED:" "$@"; cat "$out"; return 1; }
+	"$@" > "$out" 2>&1 || { error "FAILED [$?]:" "$@"; cat "$out"; return 1; }
 }
 fail() { echo "$@" 1>&2; exit 1; }
 error() { echo "$@" 1>&2; }
@@ -26,17 +26,25 @@
 			error "${premsg}failed writing to partition $pt in $img";
 			return 1;
 		}
-	local expected=$(printf "%s\n%s\n" "$info" "$data")
+	local ret="" expected=$(printf "%s\n%s\n" "$info" "$data")
 	out=$(mount-image-callback --read-only --cd "--part=$pt" "$img" -- \
-		sh -c "cat info.txt data.txt") || {
-			error "${premsg}failed mounting part $pt for verification";
-			return 1;
-		}
+		sh -c '
+		    r=0; for f in "$@"; do
+		    cat $f || { echo "$f: cat failed rc=$?"; r=99; }; done;
+		    exit $r' sh-extract info.txt data.txt)
+	ret=$?
+	if [ $ret -ne 0 -a $ret -ne 99 ]; then
+		error "${premsg}failed mounting part $pt for verification";
+		error "out=${out}"
+		return 1;
+	fi
 	[ "$expected" = "$out" ] || {
-		error "${premsg}expected $pt to have:"
+		error "${premsg}"
+		error "== expected on $pt =="
 		error "$expected"
-		error "found:"
+		error "== found on $pt =="
 		error "$out"
+		return 1
 	}
 }
 
@@ -134,7 +142,7 @@
 	mount -t tmpfs none -o size=10240 mnt/ || fail "failed tmpfs mount"
 	echo "hi mom" > mnt/file-on-tmpfs ||
 		fail "failed write to file-on-tmpfs"
-	mkdir mnt/mnt2 || faili "failed mkdir mnt/mnt2"
+	mkdir mnt/mnt2 || fail "failed mkdir mnt/mnt2"
 	mount -t tmpfs none -o size=4096 mnt/mnt2 || fail "failed 2nd tmpfs mount"
 	echo "hi again" > mnt/mnt2/second-file-on-tmpfs' ||
 		fail "testing unexpected mounts failed."
@@ -189,10 +197,10 @@
 	img=${toks#*:}
 	prefix=${toks%%:*}
 	do_pt_test "$img" 1 "foo1" "partition 1" "$prefix: " ||
-		fail "${prefix}failed testing partition 1 on $img"
+		fail "${prefix}: failed testing partition 1 on $img"
 
 	do_pt_test "$img" 2 "foo2" "partition 2" "$prefix: " ||
-		fail "${prefix}failed testing partition 2 on $img"
+		fail "${prefix}: failed testing partition 2 on $img"
 done
 
 error "Finished tests."

